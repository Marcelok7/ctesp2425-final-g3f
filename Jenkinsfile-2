pipeline {
    agent any

    tools { 
        dotnetsdk ".NET 6"
    }

    environment {
        DOCKER_IMAGE = "restaurante-api"
    }

    stages {
        stage('Checkout do Código') {
            steps {
                git branch: 'dev_marco', url: 'https://github.com/Marcelok7/ctesp2425-final-g3f.git'
                echo "Código verificado"
            }
        }

        stage('Restaurar Pacotes') {
            steps {
                script {
                    def workspace = pwd()
                    echo "Diretório de trabalho: ${workspace}"
                    sh "dotnet --info"
                    sh "dotnet restore ${workspace}/YourSolutionName.sln"
                }
                echo "Pacotes restaurados"
            }
        }

        stage('Compilação e Testes') {
            steps {
                script {
                    def workspace = pwd()
                    sh "dotnet build ${workspace}/YourSolutionName.sln --configuration Release"
                    sh "dotnet test ${workspace}/YourSolutionName.sln --configuration Release --logger 'trx;LogFileName=test-results.trx'"
                }
            }
            post {
                always {
                    // Publicar resultados dos testes
                    junit '*/**/test-results.trx'
                }
            }
        }

        stage('Análise de Qualidade com SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    script {
                        def workspace = pwd()
                        sh "dotnet sonarscanner begin /k:'restaurante-api' /d:sonar.login='${SONARQUBE_TOKEN}'"
                        sh "dotnet build ${workspace}/YourSolutionName.sln"
                        sh "dotnet sonarscanner end /d:sonar.login='${SONARQUBE_TOKEN}'"
                    }
                }
            }
        }

        stage('Construção da Imagem Docker') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Deploy com Docker') {
            steps {
                sh '''
                docker-compose down
                docker-compose up -d
                '''
            }
        }
    }

    post {
        success {
            echo 'Pipeline executado com sucesso!'
        }
        failure {
            echo 'Erro no pipeline!'
        }
    }
}